/*
 * ferrous
 *
 * The core component of ferrous-project
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 */

/// TokenErrorType : Possible error types of a [`TokenError`]
/// Possible error types of a [`TokenError`]

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TokenErrorType {
    #[serde(rename = "invalid_request")]
    InvalidRequest,
    #[serde(rename = "invalid_client")]
    InvalidClient,
    #[serde(rename = "invalid_grant")]
    InvalidGrant,
    #[serde(rename = "unauthorized_client")]
    UnauthorizedClient,
    #[serde(rename = "unsupported_grant_type")]
    UnsupportedGrantType,
    #[serde(rename = "invalid_scope")]
    InvalidScope,
    #[serde(rename = "server_error")]
    ServerError,
}

impl ToString for TokenErrorType {
    fn to_string(&self) -> String {
        match self {
            Self::InvalidRequest => String::from("invalid_request"),
            Self::InvalidClient => String::from("invalid_client"),
            Self::InvalidGrant => String::from("invalid_grant"),
            Self::UnauthorizedClient => String::from("unauthorized_client"),
            Self::UnsupportedGrantType => String::from("unsupported_grant_type"),
            Self::InvalidScope => String::from("invalid_scope"),
            Self::ServerError => String::from("server_error"),
        }
    }
}

impl Default for TokenErrorType {
    fn default() -> TokenErrorType {
        Self::InvalidRequest
    }
}
