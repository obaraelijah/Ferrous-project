/*
 * ferrous
 *
 * The core component of ferrous-project
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 */

/// AggregatedHost : A representation of an host.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AggregatedHost {
    /// Global tags
    #[serde(rename = "global_tags")]
    pub global_tags: Vec<String>,
    /// Tags which are local to the workspace
    #[serde(rename = "local_tags")]
    pub local_tags: Vec<String>,
    /// The host's uuid
    #[serde(rename = "uuid")]
    pub uuid: uuid::Uuid,
    /// The IP address of the host.  If the host has multiple addresses, create a [Host] for each and link them.
    #[serde(rename = "ip_addr")]
    pub ip_addr: String,
    #[serde(rename = "os_type")]
    pub os_type: crate::models::OsType,
    /// Response time in ms
    #[serde(
        rename = "response_time",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub response_time: Option<Option<i32>>,
    /// The ports of a host
    #[serde(rename = "ports")]
    pub ports: Vec<uuid::Uuid>,
    /// The services of a host
    #[serde(rename = "services")]
    pub services: Vec<uuid::Uuid>,
    /// A comment to the host
    #[serde(rename = "comment")]
    pub comment: String,
}

impl AggregatedHost {
    /// A representation of an host.
    pub fn new(global_tags: Vec<String>, local_tags: Vec<String>, uuid: uuid::Uuid, ip_addr: String, os_type: crate::models::OsType, ports: Vec<uuid::Uuid>, services: Vec<uuid::Uuid>, comment: String) -> AggregatedHost {
        AggregatedHost {
            global_tags,
            local_tags,
            uuid,
            ip_addr,
            os_type,
            response_time: None,
            ports,
            services,
            comment,
        }
    }
}
