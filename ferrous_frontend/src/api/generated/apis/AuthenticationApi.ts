/* tslint:disable */
/* eslint-disable */
/**
 * ferrous
 * The core component of ferrous-project
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
    ApiErrorResponse,
    FinishRegisterRequest,
    LoginRequest,
  } from '../models';
import {
    ApiErrorResponseFromJSON,
    ApiErrorResponseToJSON,
    FinishRegisterRequestFromJSON,
    FinishRegisterRequestToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
} from '../models';

export interface FinishAuthRequest {
    body: object;
}

export interface FinishRegisterOperationRequest {
    finishRegisterRequest: FinishRegisterRequest;
}

export interface LoginOperationRequest {
    loginRequest: LoginRequest;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Finishes the authentication with a security key  Use `startAuth` to retrieve the challenge response data.
     * Finishes the authentication with a security key
     */
    async finishAuthRaw(requestParameters: FinishAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling finishAuth.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/finishAuth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Finishes the authentication with a security key  Use `startAuth` to retrieve the challenge response data.
     * Finishes the authentication with a security key
     */
    async finishAuth(requestParameters: FinishAuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.finishAuthRaw(requestParameters, initOverrides);
    }

    /**
     * Finish the registration of a security key  Use `startRegister` to retrieve the challenge response data.
     * Finish the registration of a security key
     */
    async finishRegisterRaw(requestParameters: FinishRegisterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.finishRegisterRequest === null || requestParameters.finishRegisterRequest === undefined) {
            throw new runtime.RequiredError('finishRegisterRequest','Required parameter requestParameters.finishRegisterRequest was null or undefined when calling finishRegister.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/finishRegister`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FinishRegisterRequestToJSON(requestParameters.finishRegisterRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Finish the registration of a security key  Use `startRegister` to retrieve the challenge response data.
     * Finish the registration of a security key
     */
    async finishRegister(requestParameters: FinishRegisterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.finishRegisterRaw(requestParameters, initOverrides);
    }

    /**
     * Login to ferrous
     * Login to ferrous
     */
    async loginRaw(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.loginRequest === null || requestParameters.loginRequest === undefined) {
            throw new runtime.RequiredError('loginRequest','Required parameter requestParameters.loginRequest was null or undefined when calling login.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters.loginRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Login to ferrous
     * Login to ferrous
     */
    async login(requestParameters: LoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.loginRaw(requestParameters, initOverrides);
    }

    /**
     * Log out of this session  Logs a logged-in user out of his session.
     * Log out of this session
     */
    async logoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/logout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Log out of this session  Logs a logged-in user out of his session.
     * Log out of this session
     */
    async logout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logoutRaw(initOverrides);
    }

    /**
     * Starts the authentication with a security key  Use the `login` endpoint before calling this one.  Proceed with `finishAuth`.
     * Starts the authentication with a security key
     */
    async startAuthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/startAuth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Starts the authentication with a security key  Use the `login` endpoint before calling this one.  Proceed with `finishAuth`.
     * Starts the authentication with a security key
     */
    async startAuth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.startAuthRaw(initOverrides);
        return await response.value();
    }

    /**
     * Start the registration of a security key  Proceed to the `finishRegister` endpoint.
     * Start the registration of a security key
     */
    async startRegisterRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/startRegister`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Start the registration of a security key  Proceed to the `finishRegister` endpoint.
     * Start the registration of a security key
     */
    async startRegister(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.startRegisterRaw(initOverrides);
        return await response.value();
    }

    /**
     * Test the current login state  You can use this endpoint to test the current login state of your client.  If logged in, a 200 without a body is returned.
     * Test the current login state
     */
    async testRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/test`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Test the current login state  You can use this endpoint to test the current login state of your client.  If logged in, a 200 without a body is returned.
     * Test the current login state
     */
    async test(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.testRaw(initOverrides);
    }

}
