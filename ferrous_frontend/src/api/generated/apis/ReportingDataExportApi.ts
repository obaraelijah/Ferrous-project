/* tslint:disable */
/* eslint-disable */
/**
 * ferrous
 * The core component of ferrous-project
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
  ReportingWorkspaceResults,
} from '../models';
import {
    ApiErrorResponseFromJSON,
    ApiErrorResponseToJSON,
    ReportingWorkspaceResultsFromJSON,
    ReportingWorkspaceResultsToJSON,
} from '../models';

export interface ReportWorkspaceResultsRequest {
    id: number;
}

/**
 * 
 */
export class ReportingDataExportApi extends runtime.BaseAPI {

    /**
     * Retrieve a workspace\'s attack results
     * Retrieve a workspace\'s attack results
     */
    async reportWorkspaceResultsRaw(requestParameters: ReportWorkspaceResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportingWorkspaceResults>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling reportWorkspaceResults.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer_token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/reporting/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportingWorkspaceResultsFromJSON(jsonValue));
    }

    /**
     * Retrieve a workspace\'s attack results
     * Retrieve a workspace\'s attack results
     */
    async reportWorkspaceResults(requestParameters: ReportWorkspaceResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportingWorkspaceResults> {
        const response = await this.reportWorkspaceResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}