/* tslint:disable */
/* eslint-disable */
/**
 * ferrous
 * The core component of ferrous-project
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
  ServiceResultsPage,
} from '../models';
import {
    ApiErrorResponseFromJSON,
    ApiErrorResponseToJSON,
    ServiceResultsPageFromJSON,
    ServiceResultsPageToJSON,
} from '../models';

export interface GetAllServicesRequest {
    uuid: string;
    limit: number;
    offset: number;
}

/**
 * 
 */
export class ServicesApi extends runtime.BaseAPI {

    /**
     * List the services of a workspace
     * List the services of a workspace
     */
    async getAllServicesRaw(requestParameters: GetAllServicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceResultsPage>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getAllServices.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling getAllServices.');
        }

        if (requestParameters.offset === null || requestParameters.offset === undefined) {
            throw new runtime.RequiredError('offset','Required parameter requestParameters.offset was null or undefined when calling getAllServices.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/workspaces/{uuid}/services`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceResultsPageFromJSON(jsonValue));
    }

    /**
     * List the services of a workspace
     * List the services of a workspace
     */
    async getAllServices(requestParameters: GetAllServicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceResultsPage> {
        const response = await this.getAllServicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}