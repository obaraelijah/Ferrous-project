/* tslint:disable */
/* eslint-disable */
/**
 * ferrous
 * The core component of ferrous-project
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PortProtocol } from './PortProtocol';
import {
    PortProtocolFromJSON,
    PortProtocolFromJSONTyped,
    PortProtocolToJSON,
} from './PortProtocol';

/**
 * The simple representation of a port
 * @export
 * @interface SimplePort
 */
export interface SimplePort {
    /**
     * Uuid of the port
     * @type {string}
     * @memberof SimplePort
     */
    uuid: string;
    /**
     * Port number
     * @type {number}
     * @memberof SimplePort
     */
    port: number;
    /**
     * 
     * @type {PortProtocol}
     * @memberof SimplePort
     */
    protocol: PortProtocol;
    /**
     * The host this port is assigned to
     * @type {string}
     * @memberof SimplePort
     */
    host: string;
    /**
     * A comment to the port
     * @type {string}
     * @memberof SimplePort
     */
    comment: string;
}

/**
 * Check if a given object implements the SimplePort interface.
 */
export function instanceOfSimplePort(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "port" in value;
    isInstance = isInstance && "protocol" in value;
    isInstance = isInstance && "host" in value;
    isInstance = isInstance && "comment" in value;

    return isInstance;
}

export function SimplePortFromJSON(json: any): SimplePort {
    return SimplePortFromJSONTyped(json, false);
}

export function SimplePortFromJSONTyped(json: any, ignoreDiscriminator: boolean): SimplePort {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uuid': json['uuid'],
        'port': json['port'],
        'protocol': PortProtocolFromJSON(json['protocol']),
        'host': json['host'],
        'comment': json['comment'],
    };
}

export function SimplePortToJSON(value?: SimplePort | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'port': value.port,
        'protocol': PortProtocolToJSON(value.protocol),
        'host': value.host,
        'comment': value.comment,
    };
}
