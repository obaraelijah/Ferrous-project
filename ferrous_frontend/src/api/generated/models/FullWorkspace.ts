/* tslint:disable */
/* eslint-disable */
/**
 * ferrous
 * The core component of ferrous-project
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SimpleAttack } from './SimpleAttack';
import {
    SimpleAttackFromJSON,
    SimpleAttackFromJSONTyped,
    SimpleAttackToJSON,
} from './SimpleAttack';
import type { UserResponse } from './UserResponse';
import {
    UserResponseFromJSON,
    UserResponseFromJSONTyped,
    UserResponseToJSON,
} from './UserResponse';

/**
 * A full version of a workspace
 * @export
 * @interface FullWorkspace
 */
export interface FullWorkspace {
    /**
     * 
     * @type {number}
     * @memberof FullWorkspace
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof FullWorkspace
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof FullWorkspace
     */
    description?: string | null;
    /**
     * 
     * @type {UserResponse}
     * @memberof FullWorkspace
     */
    owner: UserResponse;
    /**
     * 
     * @type {Array<SimpleAttack>}
     * @memberof FullWorkspace
     */
    attacks: Array<SimpleAttack>;
    /**
     * 
     * @type {Array<UserResponse>}
     * @memberof FullWorkspace
     */
    members: Array<UserResponse>;
    /**
     * 
     * @type {Date}
     * @memberof FullWorkspace
     */
    createdAt: Date;
}

/**
 * Check if a given object implements the FullWorkspace interface.
 */
export function instanceOfFullWorkspace(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "owner" in value;
    isInstance = isInstance && "attacks" in value;
    isInstance = isInstance && "members" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function FullWorkspaceFromJSON(json: any): FullWorkspace {
    return FullWorkspaceFromJSONTyped(json, false);
}

export function FullWorkspaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): FullWorkspace {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'id': json['id'],
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'owner': UserResponseFromJSON(json['owner']),
        'attacks': ((json['attacks'] as Array<any>).map(SimpleAttackFromJSON)),
        'members': ((json['members'] as Array<any>).map(UserResponseFromJSON)),
        'createdAt': (new Date(json['created_at'])),
    };
}

export function FullWorkspaceToJSON(value?: FullWorkspace | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'id': value.id,
        'name': value.name,
        'description': value.description,
        'owner': UserResponseToJSON(value.owner),
        'attacks': ((value.attacks as Array<any>).map(SimpleAttackToJSON)),
        'members': ((value.members as Array<any>).map(UserResponseToJSON)),
        'created_at': (value.createdAt.toISOString()),
    };
}
