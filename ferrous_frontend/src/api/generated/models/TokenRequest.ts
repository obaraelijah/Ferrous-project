/* tslint:disable */
/* eslint-disable */
/**
 * ferrous
 * The core component of ferrous-project
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GrantType } from './GrantType';
import {
    GrantTypeFromJSON,
    GrantTypeFromJSONTyped,
    GrantTypeToJSON,
} from './GrantType';

/**
 * 
 * @export
 * @interface TokenRequest
 */
export interface TokenRequest {
    /**
     * 
     * @type {GrantType}
     * @memberof TokenRequest
     */
    grantType: GrantType;
    /**
     * 
     * @type {string}
     * @memberof TokenRequest
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof TokenRequest
     */
    redirectUri: string;
    /**
     * 
     * @type {string}
     * @memberof TokenRequest
     */
    clientId: string;
    /**
     * 
     * @type {string}
     * @memberof TokenRequest
     */
    clientSecret: string;
    /**
     * Code verifier
     * @type {string}
     * @memberof TokenRequest
     */
    codeVerifier?: string | null;
}

/**
 * Check if a given object implements the TokenRequest interface.
 */
export function instanceOfTokenRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "grantType" in value;
    isInstance = isInstance && "code" in value;
    isInstance = isInstance && "redirectUri" in value;
    isInstance = isInstance && "clientId" in value;
    isInstance = isInstance && "clientSecret" in value;

    return isInstance;
}

export function TokenRequestFromJSON(json: any): TokenRequest {
    return TokenRequestFromJSONTyped(json, false);
}

export function TokenRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TokenRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'grantType': GrantTypeFromJSON(json['grant_type']),
        'code': json['code'],
        'redirectUri': json['redirect_uri'],
        'clientId': json['client_id'],
        'clientSecret': json['client_secret'],
        'codeVerifier': !exists(json, 'code_verifier') ? undefined : json['code_verifier'],
    };
}

export function TokenRequestToJSON(value?: TokenRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'grant_type': GrantTypeToJSON(value.grantType),
        'code': value.code,
        'redirect_uri': value.redirectUri,
        'client_id': value.clientId,
        'client_secret': value.clientSecret,
        'code_verifier': value.codeVerifier,
    };
}
