/* tslint:disable */
/* eslint-disable */
/**
 * ferrous
 * The core component of kraken-project
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ScanTcpPortsRequest
 */
export interface ScanTcpPortsRequest {
    /**
     * 
     * @type {number}
     * @memberof ScanTcpPortsRequest
     */
    leechId: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ScanTcpPortsRequest
     */
    targets: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ScanTcpPortsRequest
     */
    exclude: Array<string>;
    /**
     * 
     * @type {Array<number>}
     * @memberof ScanTcpPortsRequest
     */
    ports: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof ScanTcpPortsRequest
     */
    retryInterval: number;
    /**
     * 
     * @type {number}
     * @memberof ScanTcpPortsRequest
     */
    maxRetries: number;
    /**
     * 
     * @type {number}
     * @memberof ScanTcpPortsRequest
     */
    timeout: number;
    /**
     * 
     * @type {number}
     * @memberof ScanTcpPortsRequest
     */
    concurrentLimit: number;
    /**
     * 
     * @type {boolean}
     * @memberof ScanTcpPortsRequest
     */
    skipIcmpCheck: boolean;
}

export function ScanTcpPortsRequestFromJSON(json: any): ScanTcpPortsRequest {
    return ScanTcpPortsRequestFromJSONTyped(json, false);
}

export function ScanTcpPortsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScanTcpPortsRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'leechId': json['leech_id'],
        'targets': json['targets'],
        'exclude': json['exclude'],
        'ports': json['ports'],
        'retryInterval': json['retry_interval'],
        'maxRetries': json['max_retries'],
        'timeout': json['timeout'],
        'concurrentLimit': json['concurrent_limit'],
        'skipIcmpCheck': json['skip_icmp_check'],
    };
}

export function ScanTcpPortsRequestToJSON(value?: ScanTcpPortsRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'leech_id': value.leechId,
        'targets': value.targets,
        'exclude': value.exclude,
        'ports': value.ports,
        'retry_interval': value.retryInterval,
        'max_retries': value.maxRetries,
        'timeout': value.timeout,
        'concurrent_limit': value.concurrentLimit,
        'skip_icmp_check': value.skipIcmpCheck,
    };
}

