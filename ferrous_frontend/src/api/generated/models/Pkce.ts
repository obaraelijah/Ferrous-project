/* tslint:disable */
/* eslint-disable */
/**
 * ferrous
 * The core component of ferrous-project
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeChallengeMethod } from './CodeChallengeMethod';
import {
    CodeChallengeMethodFromJSON,
    CodeChallengeMethodFromJSONTyped,
    CodeChallengeMethodToJSON,
} from './CodeChallengeMethod';

/**
 * The client sends the code challenge as part of the OAuth 2.0
 * Authorization Request ([Section 4.1.1 of \[RFC6749\]](https://www.rfc-editor.org/rfc/rfc6749#section-4.1.1)) using the
 * following additional parameters:
 * @export
 * @interface Pkce
 */
export interface Pkce {
    /**
     * Code challenge.
     * @type {string}
     * @memberof Pkce
     */
    codeChallenge: string;
    /**
     * 
     * @type {CodeChallengeMethod}
     * @memberof Pkce
     */
    codeChallengeMethod?: CodeChallengeMethod;
}

/**
 * Check if a given object implements the Pkce interface.
 */
export function instanceOfPkce(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "codeChallenge" in value;

    return isInstance;
}

export function PkceFromJSON(json: any): Pkce {
    return PkceFromJSONTyped(json, false);
}

export function PkceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Pkce {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'codeChallenge': json['code_challenge'],
        'codeChallengeMethod': !exists(json, 'code_challenge_method') ? undefined : CodeChallengeMethodFromJSON(json['code_challenge_method']),
    };
}

export function PkceToJSON(value?: Pkce | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code_challenge': value.codeChallenge,
        'code_challenge_method': CodeChallengeMethodToJSON(value.codeChallengeMethod),
    };
}
