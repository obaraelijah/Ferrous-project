syntax = "proto3";
package attacks;

import "attacks.shared.proto";

/*
-- BruteforceSubdomain
 */
message BruteforceSubdomainRequest {
  // A unique id that identifies the attack
  string attack_uuid = 1;
  // The domain to use as base name. It shouldn't end in a . like DNS names.
  string domain = 2;
  // Path to a wordlist that can be used for subdomain enumeration.
  //
  // The entries in the wordlist are assumed to be line seperated.
  string wordlist_path = 3;
  // Maximum of concurrent tasks that should be spawned
  //
  // 0 means, that there should be no limit.
  uint32 concurrent_limit = 4;
}

/*
-- TcpPortScan
 */

message TcpPortScanRequest {
  // A unique id that identifier the attack
  string attack_uuid = 1;
  // Valid IPv4 or IPv6 addresses
  repeated shared.Address targets = 2;
  // List of single ports and port ranges
  //
  // If no values are supplied, 1-65535 is used as default
  repeated PortOrRange ports = 3;
  // Valid IPv4 or IPv6 addresses or networks in CIDR notation
  repeated string exclude = 4;
  // The time to wait until a connection is considered failed.
  //
  // The timeout is specified in milliseconds.
  uint64 timeout = 5;
  // The concurrent task limit
  uint32 concurrent_limit = 6;
  // The number of times the connection should be retried if it failed.
  uint32 max_retries = 7;
  // The interval that should be wait between retries on a port.
  //
  // The interval is specified in milliseconds.
  uint64 retry_interval = 8;
  // Skips the initial icmp check.
  //
  // All hosts are assumed to be reachable
  bool skip_icmp_check = 9;
}

// An (inclusive) range of ports
message PortRange {
  // The first port number in this range
  uint32 start = 1;
  // The last port number in this range
  uint32 end = 2;
}

// Either a single port or a range of them
message PortOrRange {
  oneof port_or_range {
    uint32 single = 1;
    PortRange range = 2;
  }
}

// Response of a tcp port scan request
message TcpPortScanResponse {
  // Address
  attacks.shared.Address address = 1;
  // Port value
  uint32 port = 2;
}

/*
--- Certificate Transparency
 */

// Certificate transparency request
message CertificateTransparencyRequest {
  // A unique id that identifier the attack
  string attack_uuid = 1;
  // The target domain to query
  string target = 2;
  // Also include already expired certificates
  bool include_expired = 3;
  // The number of times the connection should be retried if it failed.
  uint32 max_retries = 4;
  // The interval to wait in between the retries
  // Specified in milliseconds.
  uint64 retry_interval = 5;
}


// Response to a certificate transparency request
message CertificateTransparencyResponse {
  // List of cert entries
  repeated shared.CertEntry entries = 1;
}

/*
 * Service Detection
 */

// Service detection request
message ServiceDetectionRequest {
  // A unique id that identifier the attack
  string attack_uuid = 1;
  // The ip address to connect to
  attacks.shared.Address address = 2;
  // The port to connect to
  uint32 port = 3;
  // The interval to wait for a response after connecting and sending an optional payload.
  // Specified in milliseconds.
  uint64 timeout = 4;
}

// Response to a service detection request
message ServiceDetectionResponse {
  ServiceDetectionResponseType responseType = 1;
  repeated string services = 2;
}

enum ServiceDetectionResponseType {
  // The service is unknown
  UNKNOWN = 0;
  // The service might be one of the list
  MAYBE = 1;
  // The service has been identified
  DEFINITELY = 2;
}

/*
 * Hosts alive check
 */

// Request for checking if hosts are alive
message HostsAliveRequest {
  // A unique id that identifier the attack
  string attack_uuid = 1;
  // The hosts that should be checked
  repeated attacks.shared.NetOrAddress targets = 2;
  // The timeout, specified in milliseconds.
  uint64 timeout = 3;
  // The concurrent task limit
  uint32 concurrent_limit = 4;
}

// Response for checking which hosts are alive
message HostsAliveResponse {
  // the hosts that responded
  attacks.shared.Address host = 1;
}

/*
 * DNS resolution
 */
message DnsResolutionRequest {
  // A unique id that identifier the attack
  string attack_uuid = 1;
  // The domains to resolve
  repeated string targets = 2;
  // Maximum of concurrent tasks that should be spawned
  //
  // 0 means, that there should be no limit.
  uint32 concurrent_limit = 3;
}

message DnsResolutionResponse {
  // Found record
  shared.DNSRecord record = 1;
}

// Implemented by leech; allows ferrous to request attack from a leech
service ReqAttackService {
  rpc BruteforceSubdomains(BruteforceSubdomainRequest) returns (stream DnsResolutionResponse);
  rpc RunTcpPortScan(TcpPortScanRequest) returns (stream TcpPortScanResponse);
  rpc QueryCertificateTransparency(CertificateTransparencyRequest) returns (CertificateTransparencyResponse);
  rpc ServiceDetection(ServiceDetectionRequest) returns (ServiceDetectionResponse);
  rpc HostsAliveCheck(HostsAliveRequest) returns (stream HostsAliveResponse);
  rpc DnsResolution(DnsResolutionRequest) returns (stream DnsResolutionResponse);
}

/*
------------------------ Results -------------------------------
 */

// The response to submitting a result
message ResultResponse {
  // The attack uuid assigned by ferrous
  string uuid = 1;
}

// Metainfos about the attack
message MetaAttackInfo {
  // The uuid of a workspace
  string workspace_uuid = 1;

  // The user's api key
  string api_key = 2;
}

// Result of a certificate transparency request
message CertificateTransparencyResult {
  // Information about the attack
  MetaAttackInfo attack_info = 1;
  // List of cert entries
  repeated attacks.shared.CertEntry entries = 2;
}

// Result of a subdomain enumeration request
message SubdomainEnumerationResult {
  // Information about the attack
  MetaAttackInfo attack_info = 1;
  // Found record
  shared.DNSRecord record = 2;
}

// Implemented by ferrous; allows leeches to push manual scan results via cli
service AttackResultsService {
  rpc CertificateTransparency(CertificateTransparencyResult) returns (ResultResponse);
  rpc SubdomainEnumeration(stream SubdomainEnumerationResult) returns (ResultResponse);
}


/*
------------------------ Backlog -------------------------------
 */

message EmptyResponse {}

message BacklogBruteforceSubdomainResult{
  string attack_uuid = 1;
  shared.DNSRecord record = 2;
}

message BacklogBruteforceSubdomainRequest {
  repeated BacklogBruteforceSubdomainResult entries = 1;
}

message BacklogTcpPortScanResult {
  string attack_uuid = 1;
  attacks.shared.Address address = 2;
  uint32 port = 3;
}

message BacklogTcpPortScanRequest {
  repeated BacklogTcpPortScanResult entries = 1;
}

service BacklogService {
  rpc BruteforceSubdomains(BacklogBruteforceSubdomainRequest) returns (EmptyResponse);
  rpc TcpPortScan(BacklogTcpPortScanRequest) returns (EmptyResponse);
}