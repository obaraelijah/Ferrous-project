syntax = "proto3";
package attacks;

import "attacks.shared.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

/*
-- BruteforceSubdomain
 */
message BruteforceSubdomainRequest {
  // A unique id that identifier the attack
    string attack_uuid = 1;
  // The domain to use as base name. It shouldn't end in a . like DNS names.
  string domain = 2;
  // Path to a wordlist that can be used for subdomain enumeration.
  //
  // The entries in the wordlist are assumed to be line seperated.
  string wordlist_path = 3;
  // Maximum of concurrent tasks that should be spawned
  //
  // 0 means, that there should be no limit.
  uint32 concurrent_limit = 4;
}

message BruteforceSubdomainResponse {
  // Found record
  shared.DNSRecord record = 1;
}

/*
-- TcpPortScan
 */

message TcpPortScanRequest {
  // A unique id that identifier the attack
  string attack_uuid = 1;
  // Valid IPv4 or IPv6 addresses
  repeated shared.Address targets = 2;
  // List of single ports and port ranges
  //
  // If no values are supplied, 1-65535 is used as default
  repeated PortOrRange ports = 3;
  // Valid IPv4 or IPv6 addresses or networks in CIDR notation
  repeated string exclude = 4;
  // The time to wait until a connection is considered failed.
  //
  // The timeout is specified in milliseconds.
  uint64 timeout = 5;
  // The concurrent task limit
  uint32 concurrent_limit = 6;
  // The number of times the connection should be retried if it failed.
  uint32 max_retries = 7;
  // The interval that should be wait between retries on a port.
  //
  // The interval is specified in milliseconds.
  uint64 retry_interval = 8;
  // Skips the initial icmp check.
  //
  // All hosts are assumed to be reachable
  bool skip_icmp_check = 9;
}

// An (inclusive) range of ports
message PortRange {
  // The first port number in this range
  uint32 start = 1;
  // The last port number in this range
  uint32 end = 2;
}

// Either a single port or a range of them
message PortOrRange {
  oneof port_or_range {
    uint32 single = 1;
    PortRange range = 2;
  }
}

// Response of a tcp port scan request
message TcpPortScanResponse {
  // Address
  attacks.shared.Address address = 1;
  // Port value
  uint32 port = 2;
}

/*
--- Certificate Transparency
 */


// Certificate transparency request
message CertificateTransparencyRequest {
  // The target domain to query
  string target = 1;
  // Also include already expired certificates
  bool include_expired = 2;
  // The number of times the connection should be retried if it failed.
  uint32 max_retries = 3;
  // The interval to wait in between the retries
  // Specified in milliseconds.
  uint64 retry_interval = 4;
}

// Entry of a certificate transparency response
message CertEntry {
  // The name of the issuer
  string issuer_name = 1;
  // The common name of the certificate
  string common_name = 2;
  // The values of the certificate
  repeated string value_names = 3;
  // The start date of the certificate
  google.protobuf.Timestamp not_before = 4;
  // The end date of the certificate
  google.protobuf.Timestamp not_after = 5;
  // The serial number of the certificate
  string serial_number = 6;
}

// Response to a certificate transparency request
message CertificateTransparencyResponse {
  // List of cert entries
  repeated CertEntry entries = 1;
}

service ReqAttackService {
  rpc BruteforceSubdomains(BruteforceSubdomainRequest) returns (stream BruteforceSubdomainResponse);
  rpc RunTcpPortScan(TcpPortScanRequest) returns (stream TcpPortScanResponse);
  rpc QueryCertificateTransparency(CertificateTransparencyRequest) returns (CertificateTransparencyResponse);
}